
openapi: 3.0.3
info:
  title: Go REST 
  description: GraphQL and REST API for Testing and Prototyping
  version: 1.0.1
servers:
  - url: https://gorest.co.in/public/v2
tags:
  - name: users
    description: Operations about Users
  - name: posts
    description: Operations about Posts
  - name: comments
    description: Operations about Comments
  - name: todos
    description: Operations about To-Dos
paths:
  /users:
    get:
      tags:
        - users
      summary: Get list of users
      description: Get list of users
      responses:
        '200':
          description: A JSON array of Users
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/User'
  /posts:
    get:
      tags:
        - posts
      summary: Get list of posts
      description: Get list of post
      responses:
        '200':
          description: A JSON array of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Posts'
  /comments:
    get:
      tags:
        - comments
      summary: Get list of comments
      description: Get list of comments
      responses:
        '200':
          description: A JSON array of comments
          content:
            application/json:
              schema:
                type: array
                items:
                $ref: '#/components/schemas/Comments'            
  /users/{user_id}/posts:
    get:
      tags:
        - posts
      summary: Get list of users posts
      description: Get list of users posts
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A JSON array of Users Posts
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/UserPosts'
/users/{user_id}/comments:
    get:
      tags:
        - comments
      summary: Get list of users comments
      description: Get list of users comments
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A JSON array of Users Comments
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/UserComments'       
  /users/{id}:
    get:
      tags:
        - users
      summary: Get a user by ID
      description: Get a user by ID
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A JSON object of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
                 $ref: '#/components/schemas/UserPosts'         
  /todos:
    get:
      tags:
        - todos
      summary: Get list of todos
      description: Get list of todos
      responses:
        '200':
          description: A JSON array of Todos.
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Todo'      
  delete:
      tags:
        - user
      summary: Delete user
      description: Needs an user id for delete.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The username that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found  
components:
  schemas:
    User:
      type: object          
      properties:
        id:
          type: string
          example: 5896
        name:
          type: string
          example: James
        email:
          type: string
          example: james@test.com
        gender:
          type: string
          example: M
        status:
          type: string
          example: active
    Comments:
      type: object
      properties:
        id:
          type: string
          example: 1
        post_id:
          type: string
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
        body:
          type: string
          example: This is a comment.
    UserComments:
      type: object          
      properties:
        id:
          type: integer
          example: 101010
        user_id:
          type: integer
          example: 202020
        title:
          type: string
          example: Comment Title Example.
        body:
          type: string
          example: Body Comment example.
    UserPosts:
      type: object          
      properties:
        id:
          type: integer
          example: 18403
        user_id:
          type: integer
          example: 367157
        title:
          type: string
          example: Post Title Example.
        body:
          type: string
          example: Body content example.

    User:
      type: object          
      properties:
        id:
          type: integer
          example: 693
        name:
          type: string
          example: Chanda Devar
        email:
          type: string
          example: devar_chanda@runolfsdottir.io
        gender:
          type: string
          example: female
        status:
          type: string
          example: inactive
    Posts:
      type: object
      properties:
        id:
          type: integer
          example: 18814
        user_id:
          type: integer
          example: 388250
        title:
          type: string
          example: Post title example.
        body:
          type: string
          example: Body content example.
    Todo:
      type: object
      properties: 
        id:
          type: integer
          example: 12773
        user_id:
          type: integer
          example: 385545
        title:
          type: string
          example: Todo Title 
        due_on:
          type: string 
          example: 2023-03-10T00:00:00.000+05:30
        status:
          type: string 
          example: pending

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT


security:
  - bearerAuth: [] 